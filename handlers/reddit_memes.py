from aiogram import types
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from aiogram.utils.markdown import hlink

from loader import dp
from keyboards import reddit_main, menu

from applications.memes import get_memes_reddit_old, get_memes_reddit_now, get_discussions
from applications.active_reddit import get_reddit




@dp.message_handler(commands=['get_memes'])
async def show_reddit_menu(message: types.Message):
    """–ü–æ –∫–æ–º–∞–Ω–¥–µ get_memes –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É", reply_markup=reddit_main)


class Memes(StatesGroup):
    #command1 = State()
    command2 = State()
    command3 = State()


# # –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è Translation
# @dp.message_handler(text="Old –º–µ–º—ã üßì", state=None)
# async def state_activate_old_memes_command1(message: types.Message):
#     await message.answer('–°–∫–æ–ª—å–∫–æ –º–µ–º–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å? \n –ü—Ä–∏–º–µ—Ä: 5 \nP.S. –®—Ä—ç–∫-10000000000 ))) ')
#     await Memes.command1.set()
#
#
# # –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
# @dp.message_handler(state=Memes.command1)
# async def state_activate_old_memes_command2(message: types.Message, state: FSMContext):
#     # await message.answer(get_memes_reddit_old(int(message.text)))
#     # await state.finish()
#     try:
#         memes = get_reddit(int(message.text))
#         for mem in memes:
#             await message.answer(f'{mem["description"]}\n{ mem["image"]}\n{hlink("–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç", mem["link"]) }\n{hlink("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤", mem["statistics"]) }')
#     except:
#         await message.answer('–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å üëæ')
#
#     await state.finish()


# –∞–∫—Ç–∏–≤–∞—Ü–∏—è –≤—Ç–æ—Ä–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è Translation
@dp.message_handler(text="–°–≤–µ–∂–∏–µ –º–µ–º—ã üò∏")
async def state_activate_new_memes_command1(message: types.Message):
    await message.answer('–°–∫–æ–ª—å–∫–æ –º–µ–º–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å? \n –ü—Ä–∏–º–µ—Ä: 4')
    await Memes.command2.set()


# –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤—Ç–æ—Ä–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫
@dp.message_handler(state=Memes.command2)
async def state_activate_new_memes_command2(message: types.Message, state: FSMContext):
    try:
        memes = get_memes_reddit_now(int(message.text))
        for mem in memes:
            await message.answer(f'{mem["description"]}\n{hlink("–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É", mem["image"])}')
    except:
        await message.answer('–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å üëæ')


    await state.finish()


# –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è Translation
@dp.message_handler(text="–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø–æ—Å—Ç—ã üë®‚Äçüíª", state=None)
async def state_activate_discussion_command1(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ \n –ü—Ä–∏–º–µ—Ä: Russia')
    await Memes.command3.set()

# –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤—Ç–æ—Ä–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫
@dp.message_handler(state=Memes.command3)
async def state_activate_discussion_command2(message: types.Message, state: FSMContext):
    try:
        informations = get_discussions(message.text)
        for inf in informations:
            await message.answer(f'{inf["description"]}\n{hlink("–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É", inf["image"]) }\n{hlink("–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç", inf["link"]) }\n{hlink("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤", inf["statistics"]) }')
    except:
        await message.answer('–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å üëæ')

    await state.finish()


@dp.message_handler(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é üîô")
async def show_menu(message: types.Message):
    """–í—ã–±–æ—Ä –∏–∑ –º–µ–Ω—é –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"""
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é ‚è™", reply_markup=menu)