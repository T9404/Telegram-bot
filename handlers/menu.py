# –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã aiogram
from aiogram.dispatcher.filters import Command
from aiogram.types import ReplyKeyboardRemove
from aiogram import types
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from aiogram.utils.markdown import hlink

from applications.active_reddit import get_reddit
from applications.pgbd import add_subscriber, unsubscribers
from keyboards.menu import subscriber_menu
from loader import dp

# –∏–º–ø–æ—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
from applications.cinema_kino import get_film, get_film_top20
from applications.hi_tech_news import get_news_and_save_bd
from applications.weather import get_weather, get_weather_week
from applications.work_with_bd import get_data_from_db, create_table, insert_news, del_table
from applications.translator import translator_en, translator_ru
from applications.memes import get_memes_reddit_old, get_memes_reddit_now, get_discussions
from applications.active_reddit import get_reddit

# –∏—Å–ø–æ—Ä—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä
from keyboards import menu, translate_menu, weather_back, news_back, top20_films, film_search, reddit_main


@dp.message_handler(Command("menu"))
async def show_menu(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ menu –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"""
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ ü§ñ", reply_markup=menu)


@dp.message_handler(text="–ó–∞–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É üîí")
async def exit_from_menu(message: types.Message):
    """–í—ã–±–æ—Ä –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é—à–∫–∏"""
    await message.answer("–í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ‚ùé", reply_markup=ReplyKeyboardRemove())


@dp.message_handler(text="–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ üëÖ")
async def translate_text(message: types.Message):
    """–í—ã–±–æ—Ä –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤ ü§ñ", reply_markup=translate_menu)


class Weather(StatesGroup):
    command1 = State()
    command2 = State()


@dp.message_handler(text="–ü–æ–≥–æ–¥–∞ üåè")
async def show_translate_menu(message: types.Message):
    """–ü–æ –∫–æ–º–∞–Ω–¥–µ get_translation –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –≤–∞–º –∫–Ω–æ–ø–∫—É üîÄ", reply_markup=weather_back)



#  –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è Weather
@dp.message_handler(text="–ü–æ–≥–æ–¥–∞ ‚õÖ", state=None)
async def state_activate_weather_command1(message: types.Message):
    await message.answer('–ü—Ä–æ—Å—Ç–æ –≤–≤–æ–¥–∏ –≥–æ—Ä–æ–¥ –∏–ª–∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç üèô:', reply_markup=weather_back)
    await Weather.command1.set()


# –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –≤—ã–≤–æ–¥–∏–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã
@dp.message_handler(state=Weather.command1)
async def get_answer_one_day(message: types.Message, state: FSMContext):
    weather = get_weather(message)
    await message.answer(weather)
    await state.finish()


# –∞–∫—Ç–∏–≤–∞—Ü–∏—è –≤—Ç–æ—Ä–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è Weather
@dp.message_handler(text="–ü–æ–≥–æ–¥–∞ –Ω–∞ 6 –¥–Ω–µ–π üìÜ")
async def state_activate_weather_command2(message: types.Message):
    await message.answer('–ü—Ä–æ—Å—Ç–æ –≤–≤–æ–¥–∏ –≥–æ—Ä–æ–¥ –∏–ª–∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç üèô:', reply_markup=weather_back)
    await Weather.command2.set()


# –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤—Ç–æ—Ä–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –≤—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 6 –¥–Ω–µ–π
@dp.message_handler(state=Weather.command2)
async def get_answer_six_days(message: types.Message, state: FSMContext):
    days = get_weather_week(message)
    if len(days) > 2:
        text_test = "{day}"
        text = '\n\n'.join(
            [
                text_test.format(day=day)
                for day in days
            ]
        )
        await message.answer(text)
    else:
        await message.answer(' '.join(days))
    await state.finish()


class Films(StatesGroup):
    command1 = State()


# –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è Films
@dp.message_handler(text="–†–µ–π—Ç–∏–Ω–≥ —Ñ–∏–ª—å–º–æ–≤ üé¶", state=None)
async def state_activate_films_command1(message: types.Message):
    await message.answer(
        'üì∫ –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤ –Ω–∞ –≤—ã—Ö–æ–¥–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã . \n –ü—Ä–∏–º–µ—Ä: \n –®—Ä—ç–∫-10 ', reply_markup=film_search)
    await Films.command1.set()


# –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É1 –ø–µ—Ä–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –≤—ã–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤ –∏ –∏—Ö —Ä–µ–π—Ç–∏–Ω–≥
@dp.message_handler(state=Films.command1)
async def get_rate_films_by_keyword(message: types.Message, state: FSMContext):
    """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–π—Ç–∏–Ω–≥ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É"""
    try:
        films = get_film(message.text)
        for film, year, rate, link in films:
            await message.answer(f'–§–∏–ª—å–º: "{film}"\n–ì–æ–¥: {year}\n–†–µ–π—Ç–∏–Ω–≥: "{rate}\n–°—Å—ã–ª–∫–∞: {link}')
    except:
        await message.answer('–í –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞! ü§ñ \n–°–ª–µ–¥—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞–º –Ω–∞–ø–∏—Å–∞–Ω–∏—è "–Ω–∞–∑–≤–∞–Ω–∏–µ"-"–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–¥–∞—á–∏"')
    await state.finish()


@dp.message_handler(text="–¢–û–ü 20 —Ñ–∏–ª—å–º–æ–≤ üî∫")
async def get_top20_films_by_rate_kinopoisk(message: types.Message):
    """–í—ã–≤–æ–¥–∏—Ç —Ç–æ–ø20 —Ñ–∏–ª—å–º–æ–≤ –ø–æ –≤–µ—Ä—Å–∏–∏ –∫–∏–Ω–æ–ø–æ–∏—Å–∫–∞"""
    films = get_film_top20()
    text_films = '–§–∏–ª—å–º: "{film}"\n–†–µ–π—Ç–∏–Ω–≥: "{rate}"'
    text = '\n\n'.join(
        [
            text_films.format(film=film, rate=rate)
            for film, rate in films.items()
        ]
    )
    await message.answer(text, reply_markup=top20_films)


@dp.message_handler(text="–ù–æ–≤–æ—Å—Ç–∏‚ö°")
async def show_news_menu(message: types.Message):
    """–ü–æ –∫–æ–º–∞–Ω–¥–µ show_news_menu –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –≤–∞–º –∫–Ω–æ–ø–∫—É üîÄ", reply_markup=news_back)


@dp.message_handler(text="–ù–æ–≤–æ—Å—Ç–∏ hi-tech üë§")
async def get_news(message: types.Message):
    """–í—ã–≤–æ–¥–∏—Ç 5 –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø–∏—Å–µ–π –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –±–∞–∑—ã"""
    # get_news_and_save_bd()
    # del_table()
    create_table()
    data = get_data_from_db()
    for d in data:
        await message.answer(f'–ù–æ–≤–æ—Å—Ç—å üóû:\n{d[0]}\n–°—Å—ã–ª–∫–∞:\n{d[1]}', reply_markup=news_back)


@dp.message_handler(text="–°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ hi-tech üó£")
async def get_fresh_news(message: types.Message):
    await message.answer("–ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞... ‚è∞")
    fresh_news = get_news_and_save_bd()
    if len(fresh_news) == 0:
        await message.reply("–ù–µ—Ç—É —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π ‚è∞")
    else:
        for f in fresh_news:
            await message.answer(f'–ù–æ–≤–æ—Å—Ç—å üóû:\n{f["title"]}\n{f["link"]}')


# @dp.message_handler(text="–ù–æ–≤–æ—Å—Ç–∏ hi-tech")
# async def get_fresh_news(message: types.Message):
#     fresh_news = get_news_and_save_bd()
#     await message.answer(f'–ù–æ–≤–æ—Å—Ç—å:\n{len(fresh_news)}')
#     for f in fresh_news:
#         await message.answer(f'–ù–æ–≤–æ—Å—Ç—å:\n{f["link"]}')

# –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤
@dp.message_handler(Command("get_translation"))
async def show_translate_menu(message: types.Message):
    """–ü–æ –∫–æ–º–∞–Ω–¥–µ get_translation –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤ üëÖ", reply_markup=translate_menu)


class Translation(StatesGroup):
    command1 = State()
    command2 = State()


# –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è Translation
@dp.message_handler(text="–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π (‚åí_‚åí;)", state=None)
async def state_activate_translation_command1(message: types.Message):
    await message.answer('üá¨üáß –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ ‚¨á')
    # –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ 1
    await Translation.command1.set()


# –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
@dp.message_handler(state=Translation.command1)
async def get_russian_text_from_english(message: types.Message, state: FSMContext):
    try:
        await message.answer(translator_ru(message.text))
        await state.finish()
    except:
        await message.answer('–¢–µ–∫—Å—Ç –≤–≤–æ–¥–∏—Ç–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ üá¨üáß')


# –∞–∫—Ç–∏–≤–∞—Ü–∏—è –≤—Ç–æ—Ä–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è Translation
@dp.message_handler(text="–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π („Å•Ôø£ ¬≥Ôø£)„Å•")
async def state_activate_translation_command2(message: types.Message):
    await message.answer('üá∑üá∫ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∞–Ω–≥–∏–π—Å–∫–∏–π —è–∑—ã–∫ ‚¨á')
    await Translation.command2.set()


# –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤—Ç–æ—Ä–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫
@dp.message_handler(state=Translation.command2)
async def get_english_text_from_russian(message: types.Message, state: FSMContext):
    try:
        await message.answer(translator_en(message.text))
        await state.finish()
    except:
        await message.answer('–¢–µ–∫—Å—Ç –≤–≤–æ–¥–∏—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ üá∑üá∫')












@dp.message_handler(text='–û—Ç–¥—ã—Ö —Å Reddit ü§°')
async def show_reddit_menu(message: types.Message):
    """–ü–æ –∫–æ–º–∞–Ω–¥–µ get_memes –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É", reply_markup=reddit_main)


class Memes(StatesGroup):
    #command1 = State()
    command2 = State()
    command3 = State()


# # –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è Translation
# @dp.message_handler(text="Old –º–µ–º—ã üßì", state=None)
# async def state_activate_old_memes_command1(message: types.Message):
#     await message.answer('–°–∫–æ–ª—å–∫–æ –º–µ–º–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å? \n –ü—Ä–∏–º–µ—Ä: 5 \nP.S. –®—Ä—ç–∫-10000000000 ))) ')
#     await Memes.command1.set()
#
#
# # –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
# @dp.message_handler(state=Memes.command1)
# async def state_activate_old_memes_command2(message: types.Message, state: FSMContext):
#     try:
#         memes = get_reddit(int(message.text))
#         for mem in memes:
#             await message.answer(f'{mem["description"]}\n{mem["image"]}')
#     except Exception as ex:
#         await message.answer(f'{ex}')
#         print(ex)
#         await message.answer('–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å üëæ')
#
#     await state.finish()


# –∞–∫—Ç–∏–≤–∞—Ü–∏—è –≤—Ç–æ—Ä–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è Translation
@dp.message_handler(text="–°–≤–µ–∂–∏–µ –º–µ–º—ã üò∏")
async def state_activate_new_memes_command1(message: types.Message):
    await message.answer('–°–∫–æ–ª—å–∫–æ –º–µ–º–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å? \n –ü—Ä–∏–º–µ—Ä: 4 ')
    await Memes.command2.set()


# –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤—Ç–æ—Ä–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫
@dp.message_handler(state=Memes.command2)
async def state_activate_new_memes_command2(message: types.Message, state: FSMContext):
    try:
        memes = get_memes_reddit_now(int(message.text))
        for mem in memes:
            await message.answer(f'{mem["description"]}\n{hlink("–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É", mem["image"])}')
    except:
        await message.answer('–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å üëæ')

    await state.finish()


# –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è Translation
@dp.message_handler(text="–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø–æ—Å—Ç—ã üë®‚Äçüíª", state=None)
async def state_activate_discussion_command1(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ \n –ü—Ä–∏–º–µ—Ä: Russia-2')
    await Memes.command3.set()

# –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤—Ç–æ—Ä–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫
@dp.message_handler(state=Memes.command3)
async def state_activate_discussion_command2(message: types.Message, state: FSMContext):
    try:
        informations = get_discussions(message.text)
        await message.answer(len(informations))
        for inf in informations:
            await message.answer(f'{inf["description"]}\n{hlink("–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç", inf["link"])}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: "—Ç—É—Ç –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –±—ã—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"')
            #await message.answer(
                #f'{inf["description"]}\n{hlink("–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É", inf["image"])}\n{hlink("–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç", inf["link"])}\n{hlink("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤", inf["statistics"])}')
    except Exception as ex:
        await message.answer(ex, '\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å üëæ')
    await state.finish()


@dp.message_handler(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é üîô")
async def show_menu(message: types.Message):
    """–í—ã–±–æ—Ä –∏–∑ –º–µ–Ω—é –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"""
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é üîô", reply_markup=menu)


@dp.message_handler(text="–ü–æ–¥–ø–∏—Å–∫–∞ ü§ñ")
async def subscribers(message: types.Message):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏"""
    await message.answer(
        "–ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ heroku, –º–æ–≥—É—Ç –±—ã—Ç—å –ø–µ—Ä–µ–±–æ–∏ –≤ —Ä–∞–±–æ—Ç–µ, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –≤—ã –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç–∞ –±—É–¥–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã üîÄ",
        reply_markup=subscriber_menu)


@dp.message_handler(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è üîó")
async def subscribe(message: types.Message):
    print(message.from_user.id)
    name = message.from_user.full_name
    user_id = message.from_user.id
    text = add_subscriber(name=name, user_id=user_id)
    await message.answer(text)


@dp.message_handler(text="–û—Ç–ø–∏—Å–∞—Ç—å—Å—è üñá")
async def get_unsubscribe(message: types.Message):
    text = unsubscribers(message.from_user.id)
    await message.answer(text)